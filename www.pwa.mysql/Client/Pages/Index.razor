@page "/"
@using www.pwa.Shared
@using System.Net.Http.Json
@using System.Text.Json
@using Microsoft.Extensions.Logging
@inject IHttpClientFactory httpClient
@inject ILogger<Index> logger
@inject IJSRuntime _js

<div class="d-flex flex-row">
    <div class="flex-shrink-1 p-2">
        <img class="img-fluid" src="images/www_small.png" />
    </div>
    <div class="justify-content-center align-self-center">
        @if (Walk != null)
        {
            <h3 class="text-white-50">@Walk.Name</h3>
        }
    </div>
</div>

@if (isLoading)
{
    <LoadingComponent></LoadingComponent>
}

@if (Walk != null)
{
    <MapComponent @ref="mapComponent" Walk="Walk"></MapComponent>
    <div class="row">
        <h4 class="">Gesammelte Sponsorengelder: <span class="text-nowrap">@SponsorMoney €</span></h4>
@*        <div class="col-2 form-group">
            <label for="pointinfo" class="form-label mt-4">Ziele</label>
            <select class="form-select" id="pointinfo" @onchange="InfoChanged">
            @foreach (var point in Walk.Points)
            {
                <option value="@point.Name">@point.Name</option>
            }
            </select>
        </div>*@
    </div>
    @if (Feedback != null)
    {
        <FeedbackComponent Feedback="Feedback"></FeedbackComponent>
    }
    <br />

    <div>
        <h5><strong>Herzlichen Glückwunsch und vielen Dank allen Teilnehmerinnen und Teilnehmern!</strong></h5>
        <p>Damit die Spenden nun in Nepal ankommen, ist Folgendes zu tun:</p>
        <p>Im Menüpunkt <a href="sponsoreninfo">„Sponsoreninfo“</a> findet man alle Pseudonyme und die jeweils erlaufenen Kilometer. Klickt man sein eigenes Pseudonym an, werden alle zugehörigen Sponsoren mit den Spenden-Beträgen aufgelistet. </p>
        
        <p>Diese Beträge bitte <strong>bei Frau Steer in der Schulbibliothek abgeben (Montag, 26.7., und Mittwoch, 28.7.)</strong> bzw. überweisen, falls eine Spendenquittung gewünscht wird:</p>
        <div class="border" style="max-width: 600px;">
        <p><strong>Nepal Initiative Schongau e. V.</strong></p>
        <p><strong>IBAN: DE96 7205 0000 0251 5594 23</strong></p>
        <p>BIC: AUGSDE77XXX</p>
        <p>Stadtsparkasse Augsburg</p>
        <p>Betreff (ohne Spendenquittung):</p>
        <p><strong>Sponsorenlauf GymGer - Pseudonym - Sponsor Familienname Vorname</strong></p>
        <p>Betreff (mit Spendenquittung, ab 100 € möglich):</p>
        <p><strong>Sponsorenlauf GymGer - Pseudonym - Sponsor Familienname Vorname vollstaendige Postanschrift</strong></p>
        </div>
        <p><i>Hinweis: Bei kleineren Beträgen kann der Überweisungsbeleg direkt als Quittung verwendet werden.</i></p>
        <br>
        <h5>Vielen Dank an alle Sponsoren die das <a href="https://gymger.de/sponsorenlauf-2021/">Projekt</a> unterstützen!</h5>
        <p>Wir wünschen allen schöne Sommerferien!</p>
        <p>Bleibt fit und gesund :)</p>
    </div>

    @* <h4 class="text-info">Mein neuer Lauf <span class="@badgeClass">@badgeInfo</span></h4>
    <RunFormComponent Walk="Walk"
                  editContext="editContext"
                  Run="Run"
                  OnValidSubmit="HandleValidSubmit"
                  OnInvalidSubmit="HandleInvalidSubmit">
    </RunFormComponent> *@
    <br />
    <TableComponent @ref="tableComponent" walkGuid="@walkGuid"></TableComponent>
}

@code {
    WalkAppModel Walk = null;
    EntityRunFormData Run = null;
    EditContext editContext;
    WwwFeedback Feedback = null;
    HttpClient Http;
    string badgeClass = "d-none";
    string badgeInfo = "";
    string walkGuid = "7A40C465-BDC8-4373-B6BE-6E49C10D5ECA";
    MapComponent mapComponent;
    TableComponent tableComponent;
    bool isLoading = false;
    double SponsorMoney = 0;
    string pointInfo = String.Empty;
    PointInfoComponent pointInfoComponent;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        Run = new EntityRunFormData();
        editContext = new EditContext(Run);
        Http = httpClient.CreateClient("www.pwa.ServerAPI.NoAuth");
        Walk = await Http.GetFromJsonAsync<WalkAppModel>($"WwwRun/walk/{walkGuid}",
             new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        Walk.SetNextAndCurrentPoint();
        Run.Walk = walkGuid;
        Run.School = Walk.Schools.First().Name;
        SponsorMoney = await Http.GetFromJsonAsync<double>($"WwwSponsor/{walkGuid}");
    }

    private async Task HandleValidSubmit()
    {
        badgeClass = "d-none";
        badgeInfo = "";
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());

        try
        {
            var response = await Http.PostAsJsonAsync<EntityRunFormData>("WwwRun", Run);
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Feedback = JsonSerializer.Deserialize<WwwFeedback>(content
                    , new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
            }
            else
            {
                badgeClass = "badge bg-warning";
                badgeInfo = $"Fehler beim übertragen der Daten. {response.StatusCode}";
                Feedback = null;
                StateHasChanged();
                return;
            }
        }
        catch (Exception e)
        {
            badgeClass = "badge bg-warning";
            badgeInfo = $"Fehler beim übertragen der Daten. {e.Message}";
            Feedback = null;
            isLoading = false;
            await InvokeAsync(() => StateHasChanged());
            return;
        }

        if (Feedback == null)
        {
            badgeClass = "badge bg-warning";
            badgeInfo = "Datenbank Fehler, bitter versuche es später noch einmal.";
        }
        else
        {
            if (!String.IsNullOrEmpty(Feedback.Error))
            {
                badgeClass = "badge bg-warning";
                badgeInfo = Feedback.Error;
                Feedback = null;
            }
            else
            {
                badgeClass = "badge bg-success";
                badgeInfo = "Der Lauf wurde erfolgreich gespeichert.";
                Run.Credential = String.Empty;
                Walk.CurrentDistance = Feedback.CurrentDistance;
                mapComponent.ShowCurrent(Feedback);
                tableComponent.Reset(Feedback.CurrentDistance);
                await _js.InvokeVoidAsync("Scroll", "mapid");
            }
        }
        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }
    private void HandleInvalidSubmit()
    {
        // await _js.InvokeVoidAsync("Scroll", "runform");
    }
}


